
#include <sys/mman.h>
#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
#define MAP_ANONYMOUS MAP_ANON
#endif

#include "../../dynasm/proto.h"
#include "../../dynasm/x86_64.h"

static void* link_and_encode(dasm_State** d) {
    size_t sz;
    void* buf;
    dasm_link(d, &sz);
    buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
    dasm_encode(d, buf);
    mprotect(buf, sz, PROT_READ | PROT_EXEC);
    return buf;
}

#include "interp.h"

#include "../tables.h"

|.arch x86_64

void web49_jit_compile(web49_interp_t interp, web49_interp_block_t *block) {
    dasm_State *d;
    |.section code
    dasm_init(&d, DASM_MAXSECTION);
    dasm_State **Dst = &d;
    |.globals lbl_
    void* labels[lbl__MAX];
    dasm_setupglobal(&d, labels, lbl__MAX);
    |.actionlist bf_actions
    dasm_setup(&d, bf_actions);
    dasm_growpc(&d, 8);
    |.code
    |->main:
    | mov rax, 1
    | ret 
    link_and_encode(&d);
    dasm_free(&d);
    block->code = labels[lbl_main];
}

web49_interp_data_t web49_interp_block_jit(web49_interp_t interp, web49_interp_block_t *block) {
    if (block->code == NULL) {
        web49_jit_compile(interp, block);
    }
    uint64_t (*fn)(void *memory, void *locals) = (uint64_t (*)(void *memory, void *locals)) block->code;
    uint64_t res = fn(interp.memory, interp.locals);
    printf("%"PRIu64"\n", res);
    return (web49_interp_data_t) {
        .i64_u = res,
    };
}
